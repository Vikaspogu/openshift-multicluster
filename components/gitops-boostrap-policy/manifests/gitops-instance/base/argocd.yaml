---
apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: openshift-gitops
spec:
  notifications:
    enabled: true
  resourceTrackingMethod: annotation
  kustomizeBuildOptions: --enable-alpha-plugins --load-restrictor LoadRestrictionsNone
  extraConfig:
    resource.compareoptions: |
      ignoreAggregatedRoles: true
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    insecure: true
    route:
      enabled: true
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
    service:
      type: ""
  resourceIgnoreDifferences:
    resourceIdentifiers:
      - customization:
          jsonPointers:
            - /data
        kind: Secret
      - group: admissionregistration.k8s.io
        kind: MutatingWebhookConfiguration
        customization:
          jqPathExpressions:
            - ".webhooks[]?.clientConfig.caBundle"
  resourceHealthChecks:
    - group: operator.openshift.io
      kind: IngressController
      check: |
        local hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
              -- if the status conditions are present, iterate over them and check their status
            for _, condition in pairs(obj.status.conditions) do
              if condition.type == "Degraded" and condition.status == "True" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              elseif condition.type == "DeploymentReplicasAllAvailable" and condition.status == "False" then
                hs.status = "Progressing"
                hs.message =  condition.message
                return hs
              elseif condition.type == "Progressing" and condition.status == "True" then
                hs.status = "Progressing"
                hs.message =  condition.reason
                return hs
              elseif condition.type == "Available" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = "IngressController is available"
                return hs
              end
            end
          end
        end

        -- default status when none of the previous condition matches
        hs.status = "Progressing"
        hs.message = "Status of IngressController is not known yet"
        return hs
    - group: external-secrets.io
      kind: ExternalSecret
      check: |
        local hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Ready" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for ExternalSecret"
        return hs
    - group: external-secrets.io
      kind: ClusterSecretStore
      check: |
        local hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Ready" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for ClusterSecretStore"
        return hs
    - group: argoproj.io
      kind: Application
      check: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            hs.message = obj.status.health.message
          end
        end
        return hs
    - group: operators.coreos.com
      kind: Subscription
      check: |
        health_status = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            numDegraded = 0
            numPending = 0
            msg = ""
            for i, condition in pairs(obj.status.conditions) do
              msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
              if condition.type == "InstallPlanPending" and condition.status == "True" and condition.reason ~= "RequiresApproval" then
                numPending = numPending + 1
              elseif (condition.type == "InstallPlanMissing" and condition.reason ~= "ReferencedInstallPlanNotFound") then
                numDegraded = numDegraded + 1
              elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanFailed" or condition.type == "ResolutionFailed") and condition.status == "True" then
                numDegraded = numDegraded + 1
              end
            end
            if numDegraded == 0 and numPending == 0 then
              health_status.status = "Healthy"
              health_status.message = msg
              return health_status
            elseif numPending > 0 and numDegraded == 0 then
              health_status.status = "Progressing"
              health_status.message = "An install plan for a subscription is pending installation"
              return health_status
            else
              health_status.status = "Degraded"
              health_status.message = msg
              return health_status
            end
          end
        end
        health_status.status = "Progressing"
        health_status.message = "An install plan for a subscription is pending installation"
        return health_status
    - group: operators.coreos.com
      kind: InstallPlan
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Complete" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for InstallPlan to complete"
        return hs
    - group: platform.stackrox.io
      kind: Central
      check: |
        hs = {}
        if obj.status ~= nil and obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.status == "True" or condition.reason == "InstallSuccessful" or condition.reason == "UpgradeSuccessful" then
                  hs.status = "Healthy"
                  hs.message = "Install Successful"
                  return hs
              end
            end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Central to deploy."
        return hs
    - group: image.openshift.io
      kind: ImageStream
      check: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.tags ~= nil then
            numTags = 0
            for _ , item in pairs(obj.status.tags) do
              numTags = numTags + 1
              numItems = 0
              if item.tags ~= nil then
                for _ , item in pairs(item.tags) do
                  numItems = numItems + 1
                end
                if numItems == 0 then
                  return hs
                end
              end
            end
            if numTags > 0 then
              hs.status = "Healthy"
              hs.message = "ImageStream has tags resolved"
              return hs
            end
          end
        end
        return hs
    - group: build.openshift.io
      kind: Build
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Complete" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Build to complete"
        return hs
    - group: cert-manager.io
      kind: Certificate
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Issuing" and condition.status == "True" then
                hs.status = "Progressing"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Ready" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Ready" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end

        hs.status = "Progressing"
        hs.message = "Waiting for certificate"
        return hs
    - group: cert-manager.io
      kind: ClusterIssuer
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Ready" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end

        hs.status = "Progressing"
        hs.message = "Initializing issuer"
        return hs
    - group: route.openshift.io
      kind: Route
      check: |
        local health_status = {}
        if obj.status ~= nil then
          if obj.status.ingress ~= nil then
            local numIngressRules = 0
            local numTrue = 0
            local numFalse = 0
            for _, ingressRules in pairs(obj.status.ingress) do
                numIngressRules = numIngressRules + 1
                if obj.status.ingress ~= nil then
                  for _, condition in pairs(ingressRules.conditions) do
                      if condition.type == "Admitted" and condition.status == "True" then
                          numTrue = numTrue + 1
                      elseif condition.type == "Admitted" and condition.status == "False" then
                          numFalse = numFalse + 1
                      end
                  end
                end
                health_status.status = 'Test'
            end
            if numTrue == numIngressRules then
              health_status.status = "Healthy"
              health_status.message = "Route is healthy"
              return health_status
            elseif numFalse > 0 then
              health_status.status = "Degraded"
              health_status.message = "Route is degraded"
              return health_status
            else
              health_status.status = "Progressing"
              health_status.message = "Route is still getting admitted"
              return health_status
            end
          end
        end
        health_status.status = "Progressing"
        health_status.message = "Route is still getting admitted"
        return health_status
  grafana:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  prometheus:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  initialSSHKnownHosts: {}
  applicationSet:
    # extraCommandArgs:
    #   - --enable-progressive-syncs
    resources:
      limits:
        cpu: "2"
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  rbac:
    policy: |
      p, role:none, *, *, */*, deny
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
      g, admin, role:admin
      p, role:kubechecks, applications, get, */*, allow
      p, role:kubechecks, applications, update, */*, allow
      g, kubechecks, role:kubechecks
      p, role:image-updater, applications, get, */*, allow
      p, role:image-updater, applications, update, */*, allow
      g, image-updater, role:image-updater
    scopes: "[groups]"
  repo:
    sidecarContainers:
      - name: setenv-plugin
        command: [/var/run/argocd/argocd-cmp-server]
        envFrom:
          - configMapRef:
              name: environment-variables
        image: quay.io/raffaelespazzoli/raffa-envsub:1.1
        imagePullPolicy: Always
        securityContext:
          runAsNonRoot: true
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: plugin.yaml
            name: setenv-cmp-plugin
          - mountPath: /etc/kustomize/plugin/viaduct.ai/v1/ksops
            name: ksops-generator
          - mountPath: /.config/sops/age/keys.txt
            name: sops-age
            subPath: keys.txt
          - mountPath: /etc/kustomize/plugin/policy.open-cluster-management.io/v1/policygenerator
            name: policy-generator
      - name: lovely-plugin
        resources: {}
        command: [/var/run/argocd/argocd-cmp-server]
        image: ghcr.io/crumbhole/lovely:1.2.0
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp
    volumes:
      - configMap:
          name: setenv-cmp-plugin
        name: setenv-cmp-plugin
      - name: ksops-generator
        emptyDir: {}
      - name: sops-age
        secret:
          secretName: sops-age
      - emptyDir: {}
        name: policy-generator
    env:
      - name: XDG_CONFIG_HOME
        value: /etc/kustomize/plugin/viaduct.ai/v1/ksops
      - name: SOPS_AGE_KEY_FILE
        value: /.config/sops/age/keys.txt
      - name: KUSTOMIZE_PLUGIN_HOME
        value: /etc/kustomize/plugin
    initContainers:
      - name: install-ksops-generator
        resources: {}
        image: viaductoss/ksops:v4.1.0
        command: ["/bin/sh", "-c"]
        args:
          - 'echo "Installing KSOPS..."; cp ksops /ksops-generator/ksops; echo "Done.";'
        volumeMounts:
          - mountPath: /ksops-generator
            name: ksops-generator
      - args:
          - -c
          - cp /policy-generator/PolicyGenerator-not-fips-compliant /policy-generator-tmp/PolicyGenerator
        command:
          - /bin/bash
        image: registry.redhat.io/rhacm2/multicluster-operators-subscription-rhel9:v2.13
        name: policy-generator-install
        volumeMounts:
          - mountPath: /policy-generator-tmp
            name: policy-generator
    volumeMounts:
      - mountPath: /etc/kustomize/plugin/viaduct.ai/v1/ksops
        name: ksops-generator
      - mountPath: /.config/sops/age/keys.txt
        name: sops-age
        subPath: keys.txt
      - mountPath: /etc/kustomize/plugin/policy.open-cluster-management.io/v1/policygenerator
        name: policy-generator
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
  resourceExclusions: |
    - apiGroups:
      - internal.open-cluster-management.io
      kinds:
      - ManagedClusterInfo
      clusters:
      - "*"
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
    - apiGroups:
      - "*"
      kinds:
      - ProviderConfigUsage
  sso:
    dex:
      resources:
        limits:
          cpu: 500m
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 128Mi
      openShiftOAuth: true
    provider: dex
  ha:
    enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  tls:
    ca: {}
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  controller:
    processors: {}
    resources:
      limits:
        cpu: "2"
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 1Gi
    sharding: {}
