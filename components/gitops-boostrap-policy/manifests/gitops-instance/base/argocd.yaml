---
apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: openshift-gitops
  namespace: openshift-gitops
spec:
  resourceTrackingMethod: annotation
  kustomizeBuildOptions: --enable-alpha-plugins --load-restrictor LoadRestrictionsNone
  extraConfig:
    resource.compareoptions: |
      ignoreAggregatedRoles: true
    resource.customizations.useOpenLibs.minio.min.io_Tenant: "true"
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    insecure: true
    route:
      enabled: true
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
    service:
      type: ""
  resourceIgnoreDifferences:
    resourceIdentifiers:
      - customization:
          jsonPointers:
            - /data
        kind: Secret
      - customization:
          jqPathExpressions:
            - .metadata.finalizers[]? | select(. == "post-delete-finalizer.argocd.argoproj.io" or . == "post-delete-finalizer.argocd.argoproj.io/cleanup")
            - if (.metadata.finalizers | length) == 0 then .metadata.finalizers else empty end
        kind: Application
        group: argoproj.io
  resourceHealthChecks:
    - group: argoproj.io
      kind: Application
      check: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            hs.message = obj.status.health.message
          end
        end
        return hs
    - group: cert-manager.io
      kind: Certificate
      check: |
        local hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then

            -- Always Handle Issuing First to ensure consistent behaviour
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Issuing" and condition.status == "True" then
                hs.status = "Progressing"
                hs.message = condition.message
                return hs
              end
            end

            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Ready" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end

        hs.status = "Progressing"
        hs.message = "Waiting for certificate"
        return hs
    - group: cert-manager.io
      kind: ClusterIssuer
      check: |
        local hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Ready" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end

        hs.status = "Progressing"
        hs.message = "Initializing ClusterIssuer"
        return h
    - group: cert-manager.io
      kind: Issuer
      check: |
        local hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Ready" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end

        hs.status = "Progressing"
        hs.message = "Initializing issuer"
        return hs
    - group: route.openshift.io
      kind: Route
      check: |
        local health_status = {}
        if obj.status ~= nil then
          if obj.status.ingress ~= nil then
            local numIngressRules = 0
            local numTrue = 0
            local numFalse = 0
            for _, ingressRules in pairs(obj.status.ingress) do
                numIngressRules = numIngressRules + 1
                if obj.status.ingress ~= nil then
                  for _, condition in pairs(ingressRules.conditions) do
                      if condition.type == "Admitted" and condition.status == "True" then
                          numTrue = numTrue + 1
                      elseif condition.type == "Admitted" and condition.status == "False" then
                          numFalse = numFalse + 1
                      end
                  end
                end
                health_status.status = 'Test'
            end
            if numTrue == numIngressRules then
              health_status.status = "Healthy"
              health_status.message = "Route is healthy"
              return health_status
            elseif numFalse > 0 then
              health_status.status = "Degraded"
              health_status.message = "Route is degraded"
              return health_status
            else
              health_status.status = "Progressing"
              health_status.message = "Route is still getting admitted"
              return health_status
            end
          end
        end
        health_status.status = "Progressing"
        health_status.message = "Route is still getting admitted"
        return health_status
  grafana:
    enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
    route:
      enabled: false
  prometheus:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  initialSSHKnownHosts: {}
  applicationSet:
    resources:
      limits:
        cpu: "2"
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  rbac:
    defaultPolicy: "role:admin"
    policy: |
      p, role:none, *, *, */*, deny
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
      g, admin, role:admin
    scopes: "[groups]"
  repo:
    env:
      - name: KUSTOMIZE_PLUGIN_HOME
        value: /etc/kustomize/plugin
    initContainers:
      - args:
          - -c
          - cp /policy-generator/PolicyGenerator-not-fips-compliant /policy-generator-tmp/PolicyGenerator
        command:
          - /bin/bash
        image: registry.redhat.io/rhacm2/multicluster-operators-subscription-rhel9:v2.13
        name: policy-generator-install
        volumeMounts:
          - mountPath: /policy-generator-tmp
            name: policy-generator
    volumeMounts:
      - mountPath: /etc/kustomize/plugin/policy.open-cluster-management.io/v1/policygenerator
        name: policy-generator
    sidecarContainers:
      - name: setenv-plugin
        command: [/var/run/argocd/argocd-cmp-server]
        envFrom:
          - configMapRef:
              name: environment-variables
        image: quay.io/raffaelespazzoli/raffa-envsub:1.1
        imagePullPolicy: Always
        securityContext:
          runAsNonRoot: true
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: plugin.yaml
            name: setenv-cmp-plugin
          - mountPath: /etc/kustomize/plugin/policy.open-cluster-management.io/v1/policygenerator
            name: policy-generator
          - name: tls-certs
            mountPath: /app/config/tls
    volumes:
      - configMap:
          name: setenv-cmp-plugin
        name: setenv-cmp-plugin
      - emptyDir: {}
        name: policy-generator
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
  resourceExclusions: |
    - apiGroups:
      - internal.open-cluster-management.io
      kinds:
      - ManagedClusterInfo
      clusters:
      - "*"
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  sso:
    dex:
      resources:
        limits:
          cpu: 500m
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 128Mi
      openShiftOAuth: true
    provider: dex
  ha:
    enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  tls:
    ca: {}
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  controller:
    processors: {}
    resources:
      limits:
        cpu: "2"
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 1Gi
    sharding: {}
