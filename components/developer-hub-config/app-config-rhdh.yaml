app:
  title: Red Hat Developer Hub
  baseUrl: https://backstage-developer-hub-developer-hub.apps.${PLATFORM_BASE_DOMAIN}/
backend:
  auth:
    externalAccess:
      - type: legacy
        options:
          subject: legacy-default-config
          secret: "${BACKEND_SECRET}"
  baseUrl: https://backstage-developer-hub-developer-hub.apps.${PLATFORM_BASE_DOMAIN}/
  cors:
    origin: https://backstage-developer-hub-developer-hub.apps.${PLATFORM_BASE_DOMAIN}/
    credentials: true
    methods:
      - GET
      - POST
      - PUT
      - DELETE
  csp:
    frame-ancestors: ["http://localhost:3000", "http://localhost:7007"]
    script-src: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
    script-src-elem: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
    connect-src: ["'self'", "http:", "https:", "data:"]
  reading:
    allow:
      - host: "*.apps.${PLATFORM_BASE_DOMAIN}"

# ansible:
#   creatorService:
#     baseUrl: ansible-dev-tools-rhel8-svc.developer-hub.svc.cluster.local
#     port: "8000"
#   devSpaces:
#     baseUrl: https://devspaces.apps.${PLATFORM_BASE_DOMAIN}/
#   rhaap:
#     baseUrl: ${AAP_URL}
#     token: ${AAP_AUTH_TOKEN}
#     checkSSL: false

# open-dora:
#   apiBaseUrl: https://open-dora-apache-devlake.apps.${PLATFORM_BASE_DOMAIN}

# sonarQube:
#   baseUrl: https://sonarqube-cicd-tools.apps.${PLATFORM_BASE_DOMAIN}

# orchestrator:
#   sonataFlowService:
#     baseUrl: http://localhost
#     port: 8899
#     autoStart: true
#     workflowsSource:
#       gitRepositoryUrl: https://github.com/parodos-dev/backstage-orchestrator-workflows
#       localPath: /tmp/orchestrator/repository
#   dataIndexService:
#     url: http://localhost:8899

techRadar:
  url: https://raw.githubusercontent.com/Vikaspogu/openshift-multicluster/refs/heads/main/clusters/proxmox/overlays/developer-hub-config/config/tech-radar.json

argocd:
  namespacedApps: true
  username: developer-hub
  password: ${ARGOCD_DEV_HUB_PASSWORD}
  appLocatorMethods:
    - instances:
        - name: team-alpha-cicd
          url: https://team-a-cicd-server-team-a-cicd.apps.${PLATFORM_BASE_DOMAIN}
      type: config

# signInPage: github
signInPage: oidc
auth:
  environment: production
  session:
    secret: ${BACKEND_SECRET}
  providers:
    oidc:
      production:
        metadataUrl: ${AUTH_OIDC_METADATA_URL}
        clientId: ${AUTH_OIDC_CLIENT_ID}
        clientSecret: ${AUTH_OIDC_CLIENT_SECRET}
        prompt: auto
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityProfileEmail
            - resolver: emailLocalPartMatchingUserEntityName
              allowedDomains:
                - example.com
        sessionDuration: { hours: 2 }
    github:
      production:
        clientId: ${GITHUB_APP_CLIENT_ID}
        clientSecret: ${GITHUB_APP_CLIENT_SECRET}

integrations:
  gitlab:
    - host: gitlab.vikaspogu.com
      token: ${GITLAB_TOKEN}
      apiBaseUrl: https://gitlab.vikaspogu.com/api/v4
      baseUrl: https://gitlab.vikaspogu.com
  github:
    - host: github.com
      apps:
        - appId: ${AUTH_ORG_APP_ID}
          clientId: ${AUTH_ORG_CLIENT_ID}
          clientSecret: ${AUTH_ORG_CLIENT_SECRET}
          webhookUrl: ${GITHUB_APP_WEBHOOK_URL}
          webhookSecret: ${GITHUB_APP_WEBHOOK_SECRET}
          privateKey: |
            ${AUTH_ORG1_PRIVATE_KEY}

proxy:
  endpoints:
    "/developer-hub":
      target: https://raw.githubusercontent.com/
      pathRewrite:
        "^/api/proxy/developer-hub/learning-paths": "/Vikaspogu/openshift-multicluster/main/clusters/proxmox/overlays/developer-hub-config/config/learning-paths.json"
        "^/api/proxy/developer-hub": /Vikaspogu/openshift-multicluster/main/clusters/proxmox/overlays/developer-hub-config/config/home-page.json
      changeOrigin: true
      secure: true
    "/sonarqube":
      target: https://sonarqube-cicd-tools.apps.${PLATFORM_BASE_DOMAIN}/api
      allowedMethods: ["GET"]
      auth: ${SONARQUBE_TOKEN}

kubernetes:
  serviceLocatorMethod:
    type: "multiTenant"
  clusterLocatorMethods:
    - type: "config"
      clusters:
        - url: https://api.${PLATFORM_BASE_DOMAIN}:6443
          name: vsphere
          authProvider: "serviceAccount"
          skipTLSVerify: true
          serviceAccountToken: ${token}
          dashboardApp: openshift
          dashboardUrl: https://console-openshift-console.apps.${PLATFORM_BASE_DOMAIN}/
      customResources:
        - apiVersion: v1beta1
          group: tekton.dev
          plural: pipelines
        - apiVersion: v1beta1
          group: tekton.dev
          plural: pipelineruns
        - apiVersion: v1beta1
          group: tekton.dev
          plural: taskruns
        - apiVersion: v1
          group: route.openshift.io
          plural: routes
        - apiVersion: v1
          group: postgresql.cnpg.io
          plural: cluster
        - group: "argoproj.io"
          apiVersion: "v1alpha1"
          plural: "Rollouts"
        - group: "argoproj.io"
          apiVersion: "v1alpha1"
          plural: "analysisruns"

permission:
  enabled: true
  rbac:
    admin:
      superUsers:
        - name: user:default/vikaspogu
    # policies-csv-file: ./rbac-policy.csv

catalog:
  rules:
    - allow: [Component, System, API, Resource, Location, Template]
  locations:
    # - type: url
    #   target: https://github.com/devhub-showcase/software-templates/blob/main/scaffolder-templates/**/template.yaml
    #   rules:
    #     - allow: [Template]
    - target: https://github.com/devhub-showcase/software-templates/blob/main/org.yaml
      type: url
      rules:
        - allow: [Group, User]
    - type: url
      target: https://gitlab.vikaspogu.com/Vikas/servicecatalogtemplates/-/blob/main/catalog-info.yaml?ref_type=heads
  providers:
    ocm:
      default:
        name: multiclusterhub
        kubernetesPluginRef: vsphere
    keycloakOrg:
      default:
        baseUrl: ${AUTH_OIDC_METADATA_URL}
        clientId: ${AUTH_OIDC_CLIENT_ID}
        clientSecret: ${AUTH_OIDC_CLIENT_SECRET}
        realm: master
        loginRealm: master
        schedule:
          frequency: { minutes: 2 }
          timeout: { minutes: 1 }
          initialDelay: { seconds: 15 }
    github:
      providerId:
        organization: "devhub-showcase"
        schedule:
          frequency:
            minutes: 30
          initialDelay:
            seconds: 15
          timeout:
            minutes: 3
    githubOrg:
      id: production
      githubUrl: "github"
      orgs: ["devhub-showcase"]
